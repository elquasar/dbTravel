RessourceHumaine(#NSS : int, nom : string, prenom : string, date_naissance : date)

Personnel(#Personne => RessourceHumaine : int, poste : string, salaire : decimal, t : {1 | 2}) avec t NOT NULL

// Si t = 1 alors c'est un personnel, si t = 2 c'est un accompagnateur
// On peut supposer que tout membre du Personnel de l'agence doit pouvoir accès à son emploi du temps

Client(#NSS => RessourceHumaine : int, adresse : string)


Societe(#SIREN : int, 
        nom : string, 
        reputation : {Bonne|Moyenne|Mauvaise},
        t: {1 | 2 | 3}) avec t NOT NULL

// Si t = 1 : Societe de Transport
// Si t = 2 : Societe d'Hebergement
// Si t = 3 : Societe de location d'équipement



transporte(#Societe => Transporteur.SIREN : int, 
           #Etape_id => Etape.id, 
           prix_par_personne : decimal, 
           type : {avion,bus,bateau}
           ) avec type NOT NULL

logement (#Societe => Hebergeur.SIREN : int, 
          #Etape_id => Etape.id : int, 
          prix_par_personne : decimal, 
          logement {chambre_hote, hotel}
          ) avec logement NOT NULL

location (#Societe => Equipementier.SIREN : int,
          #Activite_id => Activite.id : int, 
          type_equipement : string,
          usure  : {Neuf | très bon | bon |moyen | inutilisable},
          prix_equipement : decimal
         ) avec usure, type_equipement NOT NULL


CircuitTouristique(#id : int,
                   type : string, 
                   date_depart : date, 
                   duree : string, 
                   nb_max : int, 
                   difficulte : {1|2|3|4|5}
                   )
                   
Etape(#id : int,
      nom : string, 
      lieu : string, 
      date_debut : date,
      date_fin :date
      circuit_id => CircuitTouristique.id : int 
      ) avec nom,lieu,date_debut, circuit NOT NULL

Activite(#id : int, 
         nom : string, 
         lieu : string, 
         accompagnateur => accompagnateur.nom : string,
         etape_id => Etape.id int
         ) avec Etape NOT NULL

Reservation (#client => client.NSS, 
             #circuit_id => CircuitTouristique.id, 
             status : {reserve| partiellement payé | totalement payé},
             date_emission : date, 
             nombre_personne : int
             )
             
Notation (#client => client.nom, 
          #circuit_id : CircuitTouristique.id, 
          note : {1|2|...|10}, 
          commentaire : string
          )
          
Contraintes : 

// Contrainte sur classe mère abstraite (RessourceHumaine -> Client - Personnel) (héritage par référence)

PROJECTION(RessourceHumaine,NSS) = PROJECTION(Client,Personne) UNION PROJECTION(Personnel,Personne)



// Contrainte sur association N:M (CircuitTouristique - Etape)

PROJECTION(CircuitTouristique,id) = PROJECTION(Etape,circuit_id)


// Contrainte sur association N:M (Etape - Activite)

PROJECTION(Etape,id) = PROJECTION(Activite, etape_id)


// Contrainte sur association 1..N, 0...N (Client <- Réservation -> Circuit touristique) 

PROJECTION(Client, NSS) = PROJECTION(Reservation, client)


// Contrainte sur association 1..N, 1..N (Hebergement <- Logement -> Etape)

PROJECTION(Herbergement,SIREN) = PROJECTION(Logement,Societe) AND PROJECTION(Etape, id) = PROJECTION(Logement, Etape_id)




Vues : 

vTransport = projection(restriction(Societe,t=1),nom,reputation)

vHerbergement = projection(restriction(Societe,t=2),nom,reputation)

vEquipement = projection(restriction(Societe,t=3),nom,reputation)



